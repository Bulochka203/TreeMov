# Generated by Django 5.0.4 on 2024-10-18 00:39

import datetime
import django.contrib.postgres.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('achievments', '0001_initial'),
        ('shop', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PlayerStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rain_repelled', models.PositiveIntegerField(default=0, help_text='Атак дождя отражено')),
                ('drought_repelled', models.PositiveIntegerField(default=0, help_text='Атак засухи отражено')),
                ('ufo_repelled', models.PositiveIntegerField(default=0, help_text='Атак НЛО отражено')),
                ('trees_planted', models.PositiveIntegerField(default=0, help_text='Деревьев посажено')),
                ('coins_collected', models.PositiveIntegerField(default=0, help_text='Монет заработано')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tree',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planting_date', models.DateTimeField(auto_now_add=True, help_text='Дата посадки дерева')),
                ('stage', models.PositiveIntegerField(choices=[(1, 'FIRST STAGE'), (2, 'SECOND STAGE'), (3, 'THIRD STAGE'), (4, 'MONEY COLLECT STAGE')], default=0, help_text='Стадия роста дерева')),
                ('event', models.PositiveIntegerField(choices=[(0, 'UFO'), (1, 'Drought'), (2, 'Flood')], help_text='Следующий катаклизм', null=True)),
                ('start_time', models.DateTimeField(help_text='Время начала негативного ивента', null=True)),
                ('duration', models.DurationField(default=datetime.timedelta(seconds=300), help_text='Длительность негативного ивента')),
            ],
        ),
        migrations.CreateModel(
            name='CounterOfBusters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(default=0, help_text='Количество бустеров у студента')),
                ('buster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.buster')),
            ],
        ),
        migrations.CreateModel(
            name='MentorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Введите имя пользователя', max_length=255)),
                ('last_name', models.CharField(help_text='Введите фамилию пользователя', max_length=255)),
                ('surname', models.CharField(blank=True, help_text='Введите отчество пользователя', max_length=255, null=True)),
                ('photo', models.ImageField(blank=True, help_text='Фото пользователя', null=True, upload_to='profiles/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('offer', models.PositiveIntegerField(choices=[(0, 'Free'), (1, 'Paid-first-stage'), (2, 'Paid-second-stage'), (3, 'Paid-third-stage'), (3, 'Paid-fourth-stage')], default=0, help_text='Тариф')),
                ('code', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.teachercode')),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.schoolname')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonalProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Введите имя пользователя', max_length=255)),
                ('last_name', models.CharField(help_text='Введите фамилию пользователя', max_length=255)),
                ('surname', models.CharField(blank=True, help_text='Введите отчество пользователя', max_length=255, null=True)),
                ('photo', models.ImageField(blank=True, help_text='Фото пользователя', null=True, upload_to='profiles/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('offer', models.PositiveIntegerField(choices=[(0, 'Free'), (1, 'Paid-first-stage'), (2, 'Paid-second-stage'), (3, 'Paid-third-stage'), (3, 'Paid-fourth-stage')], default=0, help_text='Тариф')),
                ('code', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.admincode')),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.schoolname')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Введите имя пользователя', max_length=255)),
                ('last_name', models.CharField(help_text='Введите фамилию пользователя', max_length=255)),
                ('surname', models.CharField(blank=True, help_text='Введите отчество пользователя', max_length=255, null=True)),
                ('photo', models.ImageField(blank=True, help_text='Фото пользователя', null=True, upload_to='profiles/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('balance', models.IntegerField(default=0, help_text='Введите баланс DanceCoin')),
                ('energy', models.IntegerField(default=0, help_text='Введите баланс энергии')),
                ('achievements', models.ManyToManyField(related_name='profile', to='achievments.achievements')),
                ('busters', models.ManyToManyField(help_text='Список бустеров', related_name='profile', through='user_profile.CounterOfBusters', to='shop.buster')),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.schoolname')),
                ('statistics', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='user_profile.playerstatistics')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tree', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_profile.tree')),
            ],
            options={
                'ordering': ('last_name', 'first_name'),
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название группы', max_length=255)),
                ('chat_link', models.CharField(default=None, help_text='Ссылка на чат группы', max_length=255)),
                ('mentors', models.ManyToManyField(to='user_profile.mentorprofile')),
                ('students', models.ManyToManyField(to='user_profile.studentprofile')),
            ],
        ),
        migrations.AddField(
            model_name='counterofbusters',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_profile.studentprofile'),
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dates', django.contrib.postgres.fields.ArrayField(base_field=models.DateField(), size=None)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_profile.group')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance', to='user_profile.studentprofile')),
            ],
        ),
        migrations.CreateModel(
            name='TreeStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rain_repelled', models.PositiveIntegerField(default=0, help_text='Атак дождя отражено')),
                ('drought_repelled', models.PositiveIntegerField(default=0, help_text='Атак засухи отражено')),
                ('ufo_repelled', models.PositiveIntegerField(default=0, help_text='Атак НЛО отражено')),
                ('ufo_repulsed', models.PositiveIntegerField(default=0, help_text='Нло отбито')),
                ('flood_repulsed', models.PositiveIntegerField(default=0, help_text='Наводнений отбито')),
                ('drought_repulsed', models.PositiveIntegerField(default=0, help_text='Засух отбито')),
                ('coins_collected', models.PositiveIntegerField(default=0, help_text='Монет заработано c этого дерева')),
                ('tree', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='user_profile.tree')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
