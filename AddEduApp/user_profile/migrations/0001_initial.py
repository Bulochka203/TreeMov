# Generated by Django 5.0.4 on 2024-07-17 16:21

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('achievments', '0001_initial'),
        ('shop', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PlayerStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coins_collected', models.PositiveIntegerField(default=0, help_text='Монет собрано')),
                ('rain_repelled', models.PositiveIntegerField(default=0, help_text='Атак дождя отражено')),
                ('drought_repelled', models.PositiveIntegerField(default=0, help_text='Атак засухи отражено')),
                ('ufo_repelled', models.PositiveIntegerField(default=0, help_text='Атак НЛО отражено')),
                ('trees_planted', models.PositiveIntegerField(default=0, help_text='Деревьев посажено')),
                ('longest_growth_cycle', models.DurationField(default=0, help_text='Самый долгий цикл роста')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tree',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planting_date', models.DateTimeField(auto_now_add=True, help_text='Дата посадки дерева')),
                ('stage', models.PositiveIntegerField(choices=[(0, 'FIRST STAGE'), (1, 'SECOND STAGE'), (2, 'THIRD STAGE'), (3, 'MONEY COLLECT STAGE')], default=0, help_text='Стадия роста дерева')),
            ],
        ),
        migrations.CreateModel(
            name='CounterOfBusters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(default=1, help_text='Количество бустеров у студента')),
                ('buster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.buster')),
            ],
        ),
        migrations.CreateModel(
            name='MentorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Введите имя пользователя', max_length=255)),
                ('last_name', models.CharField(help_text='Введите фамилию пользователя', max_length=255)),
                ('surname', models.CharField(blank=True, help_text='Введите отчество пользователя', max_length=255, null=True)),
                ('photo', models.ImageField(blank=True, help_text='Фото пользователя', null=True, upload_to='profiles/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Введите имя пользователя', max_length=255)),
                ('last_name', models.CharField(help_text='Введите фамилию пользователя', max_length=255)),
                ('surname', models.CharField(blank=True, help_text='Введите отчество пользователя', max_length=255, null=True)),
                ('photo', models.ImageField(blank=True, help_text='Фото пользователя', null=True, upload_to='profiles/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('balance', models.IntegerField(default=0, help_text='Введите баланс DanceCoin')),
                ('energy', models.IntegerField(default=0, help_text='Введите баланс энергии')),
                ('achievements', models.ManyToManyField(related_name='profile', to='achievments.achievements')),
                ('busters', models.ManyToManyField(help_text='Список бустеров', related_name='profile', through='user_profile.CounterOfBusters', to='shop.buster')),
                ('statistics', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='user_profile.playerstatistics')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tree', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='user_profile.tree')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название группы', max_length=255)),
                ('mentors', models.ManyToManyField(to='user_profile.mentorprofile')),
                ('students', models.ManyToManyField(to='user_profile.studentprofile')),
            ],
        ),
        migrations.AddField(
            model_name='counterofbusters',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_profile.studentprofile'),
        ),
        migrations.CreateModel(
            name='TreeStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coins_collected', models.PositiveIntegerField(default=0, help_text='Монет собрано')),
                ('rain_repelled', models.PositiveIntegerField(default=0, help_text='Атак дождя отражено')),
                ('drought_repelled', models.PositiveIntegerField(default=0, help_text='Атак засухи отражено')),
                ('ufo_repelled', models.PositiveIntegerField(default=0, help_text='Атак НЛО отражено')),
                ('tree', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='user_profile.tree')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
